import 'package:flutter/material.dart';
import 'package:uas/models/profile.dart';
import 'package:uas/services/profile.dart';

class ProfilePage extends StatefulWidget {
  @override
  _ProfilePageState createState() => _ProfilePageState();
}

class _ProfilePageState extends State<ProfilePage> {
  late Future<List<Profile>> futureProfile;

  @override
  void initState() {
    super.initState();
    futureProfile = ApiService().fetchProfile(); // Fetch the profile data
  }

  class _ProfilePageState extends State<ProfilePage> {
  late Profile dummyProfile;

  @override
  void initState() {
    super.initState();

    // Dummy data for the profile
    dummyProfile = Profile(
      profilePic: 'https://via.placeholder.com/150', // Dummy profile picture URL
      bio: 'This is a dummy bio for the user profile.', // Dummy bio
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Profile'),
      ),
      body: FutureBuilder<List<Profile>>(
        future: futureProfile,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            print('Error: ${snapshot.error}');
            return Center(child: Text('Error: ${snapshot.error}'));
          }else if (!snapshot.hasData || snapshot.data!.isEmpty) {
            return Center(child: Text('No profile found'));
          } else {
            final profile = snapshot.data![0]; // Get the first profile, assuming only one profile per user

            return Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  CircleAvatar(
                    radius: 50,
                    backgroundImage: NetworkImage(profile.fields.profilePic),
                  ),
                  SizedBox(height: 16),
                  Text(
                    'Bio: ${profile.fields.bio}',
                    style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                  ),
                  // Display other fields as necessary
                ],
              ),
            );
          }
        },
      ),
    );
  }
}


import 'dart:convert';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:pbp_django_auth/pbp_django_auth.dart';
import 'package:provider/provider.dart';
import 'package:uas/screens/authentication/login.dart';
import 'package:uas/services/profile.dart';
import 'package:uas/models/profile.dart';

// class Profile {
//   final String profilePic;
//   final String bio;
//   final String email;

//   Profile({required this.profilePic, required this.bio, required this.email});

//   factory Profile.fromJson(Map<String, dynamic> json) {
//     return Profile(
//       profilePic: json['fields']['profile_pic'] ?? 'https://via.placeholder.com/150',
//       bio: json['fields']['bio'] ?? 'No bio available',
//       email: json['fields']['email'] ?? 'No email available',
//     );
//   }
// }

// Dummy JSON data
const String dummyJson = '''
[
  {
    "fields": {
      "profile_pic": "https://via.placeholder.com/150",
      "bio": "Food enthusiast and traveler. Exploring Solo one dish at a time.",
      "email": "customer@example.com"
    }
  }
]
''';

// Method to fetch dummy profile data
Future<List<Profile>> fetchDummyProfile() async {
  final List<dynamic> jsonData = jsonDecode(dummyJson);
  return jsonData.map((item) => Profile.fromJson(item)).toList();
}

class ProfilePage extends StatefulWidget {
  @override
  _ProfilePageState createState() => _ProfilePageState();
}

class _ProfilePageState extends State<ProfilePage> {
  late Future<Profile> futureProfile;
  late Future<List<Profile>> dummyProfile;

  // Delete account
  Future<void> deleteAccount(request) async {
    // final url = Uri.parse('http://localhost:8000/profile/delete_account_flutter/');
    // final headers = {'Content-Type': 'application/json'};

    final response = await request.postJson('http://localhost:8000/profile/delete_account_flutter/', {});

    if (response.statusCode == 200) {
      print('Account deleted successfully!');
      Navigator.pushReplacement(
                      context,
                      MaterialPageRoute(builder: (context) => const LoginPage()),
                    );
    } else {
      final responseBody = response.body;
      print('Failed to delete account: $responseBody');
      throw Exception('Failed to delete account');
    }
  }

  @override
  void initState() {
    final request = context.read<CookieRequest>();
    super.initState();
    futureProfile = ApiService().fetchProfile(request);
    // dummyProfile = fetchDummyProfile();
  }

  // Future<Profile> fetchProfile(request) async {
  //   final response = await request.get('http://127.0.0.1:8000/profile/json/');

  //   if (response.statusCode == 200) {
  //     final data = jsonDecode(response.body);
  //     return Profile.fromJson(data[0]); // Assuming the API returns a list of profiles
  //   } else {
  //     throw Exception('Failed to load profile');
  //   }
  // }

  @override 
  Widget build(BuildContext context) {
    final request = context.watch<CookieRequest>();
    futureProfile = ApiService().fetchProfile(request);
    print(futureProfile);
    // futureProfile = fetchProfile(request);
    dummyProfile = fetchDummyProfile();
    
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'MANGAN" SOLO',
          style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
        ),
        backgroundColor: const Color(0xFF795548),
        centerTitle: true,
        leading: IconButton(
          icon: const Icon(Icons.menu),
          onPressed: () {},
        ),
      ),
      // body: FutureBuilder<Profile>(
      //   future: futureProfile,
      body: FutureBuilder<List<Profile>>(
        future: dummyProfile,
        
        builder: (context, snapshot) {
          // if (snapshot.connectionState == ConnectionState.waiting) {
          //   return const Center(child: CircularProgressIndicator());
          // } else if (snapshot.hasError) {
          //   return Center(child: Text('Error: ${snapshot.error}'));
          // } else if (!snapshot.hasData) {
          //   return const Center(child: Text('No profile data available'));
          // }

          // final profile = snapshot.data!;
          return buildProfilePage();
        },
      ),
    );
  }

  // Widget buildProfilePage(Future<Profile> profile) {
  // // Widget buildProfilePage(List<Profile> profile) {
  //   return Container(
  //     decoration: const BoxDecoration(
  //       image: DecorationImage(
  //         image: AssetImage('assets/images/batik.png'),
  //         fit: BoxFit.cover,
  //       ),
  //     ),
  //     child: SingleChildScrollView(
  //       child: Column(
  //         children: [
  //           const SizedBox(height: 30),
  //           CircleAvatar(
  //             radius: 50,
  //             backgroundImage: NetworkImage(profile.profilePic),
  //             backgroundColor: Colors.grey.shade300,
  //           ),
  //           const SizedBox(height: 10),
  //           Text(
  //             profile.email,
  //             style: TextStyle(
  //               fontSize: 24,
  //               fontWeight: FontWeight.bold,
  //               color: Colors.brown.shade800,
  //             ),
  //           ),
  //           const SizedBox(height: 20),
  //           Container(
  //             margin: const EdgeInsets.symmetric(horizontal: 16),
  //             padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 20),
  //             decoration: BoxDecoration(
  //               color: Colors.brown.shade100,
  //               borderRadius: BorderRadius.circular(16),
  //             ),
  //             child: Column(
  //               crossAxisAlignment: CrossAxisAlignment.start,
  //               children: [
  //                 buildTextField(label: 'Email', value: profile.email),
  //                 const SizedBox(height: 20),
  //                 buildTextField(label: 'Bio', value: profile.bio, multiline: true),
  //                 const SizedBox(height: 20),
  //                 Center(
  //                   child: ElevatedButton(
  //                     style: ElevatedButton.styleFrom(
  //                       backgroundColor: Colors.brown.shade600,
  //                       shape: RoundedRectangleBorder(
  //                         borderRadius: BorderRadius.circular(8),
  //                         side: const BorderSide(color: Colors.brown, width: 1.5),
  //                       ),
  //                       padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 12),
  //                     ),
  //                     onPressed: () {},
  //                     child: const Text(
  //                       'Edit',
  //                       style: TextStyle(color: Colors.white),
  //                     ),
  //                   ),
  //                 ),
  //               ],
  //             ),
  //           ),
  //           const SizedBox(height: 30),
  //           buildActionButton('Review Saya', context),
  //           buildActionButton('Bookmark Saya', context),
  //           buildActionButton('Lihat Lebih Lanjut', context),
  //         ],
  //       ),
  //     ),
  //   );
  // }

  Widget buildProfilePage() {
  // Widget buildProfilePage(List<Profile> profile) {
    return Container(
      decoration: const BoxDecoration(
        image: DecorationImage(
          image: AssetImage('assets/images/batik.png'),
          fit: BoxFit.cover,
        ),  
      ),

      child: Stack(children: [
        Container(
          color: Colors.black.withOpacity(0.8), // Adjust the opacity as needed
        ),
        SingleChildScrollView(
        child: Column(
          children: [
            const SizedBox(height: 30),
            CircleAvatar(
              radius: 50,
              // backgroundImage: NetworkImage(profile.profilePic),
              backgroundColor: Colors.grey.shade300,
              child:  Stack(
                children: [
                  Align(
                      alignment: Alignment.bottomRight,
                      child: GestureDetector(
                        onTap: () {
                          Navigator.push(
                            context,
                            MaterialPageRoute(builder: (context) => const LoginPage()),
                          );
                        },
                        child: const CircleAvatar(
                          radius: 18,
                          backgroundColor: Color.fromARGB(179, 62, 0, 0),
                          child: Icon(Icons.camera_alt_outlined, color: Colors.blue),
                        ),
                      ),
                    ),
                ]
              ),
            ),
            // Positioned(
            //   bottom: 0,
            //   right: -25,
            //   child: RawMaterialButton(
            //     onPressed: () {},
            //     elevation: 2.0,
            //     fillColor: Color(0xFFF5F6F9),
            //     child: Icon(Icons.camera_alt_outlined, color: Colors.blue,),
            //     padding: EdgeInsets.all(15.0),
            //     shape: CircleBorder(),
            //   )
            // ),
            const SizedBox(height: 10),
            const Text(
              "NAMAAAA BRO",
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
            const SizedBox(height: 20),
            Container(
              margin: const EdgeInsets.symmetric(horizontal: 16),
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 20),
              decoration: BoxDecoration(
                color: Colors.brown.shade100,
                borderRadius: BorderRadius.circular(16),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  buildTextField(label: 'Email', value: "profile.email"),
                  const SizedBox(height: 20, width: 100,),
                  buildTextField(label: 'Bio', value: "profile.bio", multiline: true),
                  const SizedBox(height: 20),
                  Center(
                    child: ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.brown.shade600,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                          side: const BorderSide(color: Colors.brown, width: 1.5),
                        ),
                        padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 12),
                      ),
                      onPressed: () {},
                      child: const Text(
                        'Edit',
                        style: TextStyle(color: Colors.white),
                      ),
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 30),
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const LoginPage()),
                );
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.brown,
              ),
              child: const Text("Review Saya",
                  style: TextStyle(
                      fontFamily: 'CrimsonPro',
                      color: Color(0xFFFFFFFF))),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const LoginPage()),
                );
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.brown,
              ),
              child: const Text("Bookmarks Saya",
                  style: TextStyle(
                      fontFamily: 'CrimsonPro',
                      color: Color(0xFFFFFFFF))),
            ),

            
            // buildActionButton('Review Saya', context),
            // buildActionButton('Bookmark Saya', context),
            // buildActionButton('Lihat Lebih Lanjut', context),
          ],
        ),
      ),
      ],)
      
      
    );
  }

 Widget buildTextField({required String label, required String value, bool multiline = false}) {
  return Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
      Text(
        label,
        style: TextStyle(
          fontSize: 16,
          fontWeight: FontWeight.bold,
          color: Colors.brown.shade800,
        ),
      ),
      const SizedBox(height: 4),
      Container(
        width: MediaQuery.of(context).size.width * 0.95, // 90% of the screen width
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 10),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: Colors.brown.shade300),
        ),
        child: TextField(
          controller: TextEditingController(text: value),
          readOnly: true,
          maxLines: multiline ? null : 1,
          minLines: multiline ? 1 : null,
          decoration: null,
          style: const TextStyle(fontSize: 16),
        ),
      ),
    ],
  );
}

  Widget buildActionButton(String text, BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: ElevatedButton(
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.brown.shade600,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8),
          ),
          padding: const EdgeInsets.symmetric(vertical: 18, horizontal: 32), // Increase vertical and horizontal padding  
        ),
        onPressed: () {},
        child: Text(
          text,
          style: const TextStyle(color: Colors.white, fontSize: 16),
        ),
      ),
    );
  }
}

void main() {
  runApp(MaterialApp(
    debugShowCheckedModeBanner: false,
    home: ProfilePage(),
  ));
}
